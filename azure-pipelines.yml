# Each time the pipeline is run, name the build with the following convention
name: $(Build.BuildId)

# Triggers Pipeline only on Master
trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
      - LICENSE

# Disables triggering Pipeline run at creation of every Pull Request
pr: none

# Global variables for the pipeline
variables:
  vmImage: ubuntu-latest
  k8s-service-connection:
  kubernetes-namespace:

stages:
  - stage: CI
    displayName: CI
    jobs:
      - job: Prerequisites
        displayName: Prerequisites
        pool:
          vmImage: $(vmImage)
          steps:
            - task: AWSShellScript@1
              displayName: Create TF plan
              inputs:
                awsCredentials: ""
                regionName: "eu-central-1"
                scriptType: "inline"
                inlineScript: |
                  terraform init
                  terraform plan --out plan.tfplan
                  terraform apply -auto-approve plan.tfplan
                  terraform output -json > output.json
                disableAutoCwd: true
                workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
                failOnStandardError: true
            - task: OneLuckiDev.json2variable.vsts-json-to-variable.oneLuckiDevJson2Variable@1
              inputs:
                jsonFile: "$(System.DefaultWorkingDirectory)/output/output.json"
      - deployment: K8s
        displayName: Deploy to Kubernetes
        variables:
          AWS_PROFILE: "saml"
        environment: ""

        strategy:
          runOnce:
            deploy:
              steps:
                # Setup auth against k8s
                - bash: |
                    VERSION=1.14.6
                    BUILD_DATE=2019-08-22
                    DOWNLOAD_URL=https://amazon-eks.s3-us-west-2.amazonaws.com/${VERSION}/${BUILD_DATE}/bin/linux/amd64/aws-iam-authenticator
                    LOCAL_FILE=./aws-iam-authenticator
                    curl -Lo $LOCAL_FILE $DOWNLOAD_URL
                    chmod +x $LOCAL_FILE
                    sudo mv $LOCAL_FILE /usr/local/bin

                    # Install saml2aws
                    VERSION=2.20.0
                    DOWNLOAD_URL=https://github.com/Versent/saml2aws/releases/download/v${VERSION}/saml2aws_${VERSION}_linux_amd64.tar.gz
                    LOCAL_FILE=./saml2aws.tar.gz
                    curl -Lo $LOCAL_FILE $DOWNLOAD_URL
                    tar xvzf $LOCAL_FILE
                    rm $LOCAL_FILE
                    sudo mv saml2aws /usr/local/bin

                    # Configure saml2aws
                    saml2aws configure --url=https://adfs.dfds.com/adfs/ls/IdpInitiatedSignOn.aspx --idp-provider=ADFS --mfa=Auto --session-duration=28800 --skip-prompt

                    saml2aws login --url=https://adfs.dfds.com/adfs/ls/IdpInitiatedSignOn.aspx --idp-provider=ADFS --mfa=Auto --skip-prompt --force --disable-keychain
                    eval $(saml2aws script --url=https://adfs.dfds.com/adfs/ls/IdpInitiatedSignOn.aspx --idp-provider=ADFS --mfa=Auto)
                  env:
                    SAML2AWS_PASSWORD: $(SAML2AWS_PASSWORD)
                    SAML2AWS_USERNAME: $(SAML2AWS_USERNAME)
                    SAML2AWS_ROLE: $(SAML2AWS_ROLE)
                - task: OneLuckiDev.json2variable.vsts-json-to-variable.oneLuckiDevJson2Variable@1
                  inputs:
                  jsonFile:
                    "$(System.DefaultWorkingDirectory)/output/output.json"
                    # Replace token values in yaml files with pipeline variables
                - task: qetza.replacetokens.replacetokens-task.replacetokens@3
                  displayName: "Replace tokens in yaml files"
                  inputs:
                    rootDirectory: "$(System.DefaultWorkingDirectory)/k8s/"
                    targetFiles: "*.yaml"
                    tokenPrefix: "$("
                    tokenSuffix: ")"

                # Apply Kubernetes manifests
                - task: Kubernetes@1
                  displayName: "Apply manifests"
                  inputs:
                    connectionType: Kubernetes Service Connection
                    kubernetesServiceEndpoint: "$(k8s-service-connection)"
                    namespace: $(kubernetes-namespace)
                    command: apply
                    arguments: "-f $(Pipeline.Workspace)/manifests/"
      - job: Helm
        displayName: "Deploy to Kubernetes"
        pool:
          vmImage: $(vmImage)

        steps:
          # Install the Helm binary to the host machine
          - task: HelmInstaller@1
            displayName: "Helm client installer"
            inputs:
              helmVersionToInstall: 3.2.4

          - task: HelmDeploy@0
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceConnection: $(k8s-service-connection)
              namespace: $(kubernetes-namespace)
              command: "repo"
              arguments: "add datahub https://helm.datahubproject.io/"

          - task: HelmDeploy@0
            inputs:
              connectionType: "Kubernetes Service Connection"
              kubernetesServiceConnection: $(k8s-service-connection)
              namespace: $(kubernetes-namespace)
              command: "upgrade"
              chartType: "Name"
              chartName: "datahub/datahub"
              chartVersion: "0.2.16"
              releaseName: "dfds-datahub"
              install: false
              arguments: "-i -f values.yaml -f values-compass.yaml"
